<template>
    <div class="form-view">
        <br>
        <!--工具栏-->
        <Row type="flex" justify="start" class="code-row-bg">
            <Col span="1"><Button @click="add" v-if="wShow">新增</Button> <Button @click="disable" v-if="rwShow">禁用</Button> <Button @click="enable" v-if="rwShow">启用</Button></Col>
            <Col span="4" offset="17"><Input placeholder="请输入..." v-model="searchContent" v-if="rShow"/>  <Button type="primary" icon="ios-search" @click="search" v-if="rShow">搜索</Button></Col>
        </Row>
        <!--表格-->
        <Table :data="tableData" :columns="tableColumns" stripe ref="table" height="200" v-if="rShow"></Table>
        <!--分页-->
        <div style="margin: 10px;overflow: hidden" v-if="rShow">
            <div style="float: right;">
                <Page :total="total" :current="current" :page-size="pageSize" @on-change="changePage" @on-page-size-change="changePageSize" show-total show-elevator show-sizer></Page>
            </div>
        </div>
        <!--模态框-->
        <Modal v-model="modal1" :title="modalTitle" @on-ok="ok" @on-cancel="cancel" :loading="loading">
            <Form ref="formValidate" :model="formValidate" :rules="ruleValidate" :label-width="80">
                <FormItem prop="id">
                    <input v-model="formValidate.id" name="id" hidden="true"/>
                </FormItem>
#foreach($column in $columns)
#if($column.columnName != $pk.columnName && $column.attrname != 'createTime' && $column.attrname != 'updateTime' && $column.attrname != 'status')
                <FormItem label="${column.comments}" prop="${column.attrname}">
                    <Input v-model="formValidate.${column.attrname}" placeholder="请输入${column.comments}"></Input>
                </FormItem>
#end
#if($column.attrname == 'status')
                <FormItem label="${column.comments}" prop="${column.attrname}">
                    <i-switch v-model="formValidate.status" size="large" >
                        <span slot="close">禁用</span>
                        <span slot="open">正常</span>
                    </i-switch>
                </FormItem>
#end
#end
            </Form>
        </Modal>
    </div>
</template>
<script>
    import axios from 'axios';
    import {getSelectIds, dateTimeFormat} from 'common/js/util';
    export default{
        data () {
            return {
                wShow:this.wShowInit(),
                rShow:this.rShowInit(),
                rwShow:this.rwShowInit(),
                modalTitle:"新增",
                formValidate: {
                    id:'',
#foreach($column in $columns)
#if($column.columnName != $pk.columnName)
                    $column.attrname:'',
#end
#end
                },
                searchContent:'',
                ruleValidate: {
#foreach($column in $columns)
#if($column.columnName != $pk.columnName)
                    $column.attrname:[
                    {
                        required:true,
                        messassge: '${column.comments}不能为空',
                        trigger:'blur'
                    }],
#end
#end
                },
                modal1: false,
                pageSize:10,
                current:1,
                total:100,
                loading:true,
                tableData: this.mocktableData(),
                tableColumns: [
                    {
                        type: 'selection',
                        width: 60,
                        align: 'center'
                    },
                    {
                        title: 'ID',
                        key: 'id',
                        sortable: true
                    },
#foreach($column in $columns)
#if($column.columnName != $pk.columnName && $column.attrname != 'createTime' && $column.attrname != 'updateTime' && $column.attrname !='status')
                    {
                        title: '${column.comments}',
                        key: '${column.attrname}',
                        sortable: true
                    },
#end
#if($column.attrname == 'createTime')
                    {
                        title: '创建时间',
                        key: 'createTime',
                        sortable: true,
                        render: (h, params) => {
                            const row = params.row;
                            return h('div', dateTimeFormat(row.createTime));
                        }
                    },
#end
#if($column.attrname == 'updateTime')
                    {
                        title: '更新时间',
                        key: 'updateTime',
                        sortable: false,
                        render: (h, params) => {
                            const row = params.row;
                            return h('div', dateTimeFormat(row.updateTime));
                        }
                    },
#end
#if($column.attrname == 'status')
                    {
                        title: '状态',
                        key: 'status',
                        sortable: true,
                        render: (h, params) => {
                            const row = params.row;
                            const color = row.status==0 ?'green' : 'red';
                            const text = row.status==0 ? '正常' : '禁用';
                            return h('Tag', {
                                props: {
                                    type: 'dot',
                                    color: color
                                }
                            }, text);
                        }
                    },
#end
#end
                    {
                        title: '操作',
                        key: 'action',
                        width: 150,
                        align: 'center',
                        render: (h, params) => {
                            if(this.wShow)
                            {
                                return h('div', [
                                    h('Button', {
                                        props: {
                                            type: 'primary',
                                            size: 'small'
                                        },
                                        style: {
                                            marginRight: '5px'
                                        },
                                        on: {
                                            click: () => {
                                                this.show(params.index)}
                                        }
                                    }, '编辑'),
                                    h('Button', {
                                        props: {
                                            type: 'error',
                                            size: 'small'
                                        },
                                        on: {
                                            click: () => {
                                                this.remove(params.index)}
                                        }
                                    }, '删除')]);
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    ]
                    }
                    },
        methods: {
            wShowInit(){
                var perm = sessionStorage.getItem("${classname}");
                if(perm == 11 || perm == 1)
                {
                    return true;
                }
                return false;
            },
            rShowInit(){
                var perm = sessionStorage.getItem("${classname}");
                if(perm == 11 || perm == 10)
                {
                    return true;
                }
                return false;
            },
            rwShowInit(){
                var perm = sessionStorage.getItem("${classname}");
                if(perm == 11)
                {
                    return true;
                }
                return false;
            },
            mocktableData (offset) {
                let retData = [];
                if(offset == undefined)
                {
                    offset = 0;
                }
                var temp = {
                    'limit': this.pageSize, //页面大小
                    'offset': offset //页码
                };
                axios.get('http://localhost:8087/admin/${classname}/all', {
                    params: temp,
                }).then((response)=>{
                var data = response.data;
                this.current = data.curPage;
                this.total = data.total;
                var rows = data.rows;
                for (let i = 0; i < rows.length; i++) {
                    retData.push({
#foreach($column in $columns)
                        ${column.attrname}:rows[i].${column.attrname},
#end
                    })
                }
            })
            .catch(function (response) {
                });
                return retData;
            },
            changePage (index) {
                // 这里直接更改了模拟的数据，真实使用场景应该从服务端获取数据
                var offset = (index-1) * this.pageSize;
                this.tableData = this.mocktableData(offset);
            },
            changePageSize (size)
            {
                var offset = 0;
                this.pageSize = size;
                this.tableData = this.mocktableData(offset);
            },
            show (index) {
                this.modal1 = true;
                this.modalTitle ="编辑";
                this.#[[$refs]]#['formValidate'].resetFields();
                this.formValidate.id = this.tableData[index].id;
#foreach($column in $columns)
#if($column.columnName != $pk.columnName && $column.attrname != 'createTime' && $column.attrname != 'updateTime' && $column.attrname !='status')
                this.formValidate.${column.attrname} = this.tableData[index].${column.attrname};
#end
#if($column.attrname == 'status')
                this.formValidate.${column.attrname} = this.tableData[index].${column.attrname} ==0?true:false;
#end
#end
            },
            add() {
                this.modal1 = true;
                this.modalTitle = "新增";
                this.$refs['formValidate'].resetFields();
#foreach($column in $columns)
#if($column.attrname == 'status')
                this.formValidate.${column.attrname} = true;
#end
#end
            },
            remove (index) {
                this.#[[$Modal]]#.confirm({
                    title: '提示',
                    content: '<p>确定要删除吗?</p><p></p>',
                    onOk: () => {
                        var ids = this.tableData[index].id;
                        axios.delete('http://localhost:8087/admin/${classname}/'+ids, {
                            transformRequest: [function (data) {
                                let ret = '';
                                for (let it in data) {
                                    ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'
                                }
                                return ret
                            }],
                            headers: {
                                'Content-Type':'application/x-www-form-urlencoded'
                            }
                        }).then((response)=>{
                            this.tableData.splice(index, 1);
                            this.#[[$Message]]#.success('success');
                        }).catch(function (response) {
                            this.#[[$Message]]#.error('fail');
                        });
                    }
                });
            },
            changeLoading() {
                this.loading = false;
                this.#[[$nextTick]]#(() => {
                    this.loading = true;
            });
            },
            ok () {
                this.#[[$refs]]#['formValidate'].validate(valid => {
				if(!valid) {
				return this.changeLoading();
				}
				//请求提交表单
				var ${classname} = {};
#foreach($column in $columns)



                ${classname}['${column.attrname}'] = this.formValidate.${column.attrname};
#end
                var method = 'post';
                if(this.formValidate.id != '')
                {
                    method = 'put';
                }
				axios({
				url: 'http://localhost:8087/admin/${classname}/edit',
				method: 'method',
				data: ${classname},
				transformRequest: [function (data) {
				let ret = ''
				for (let it in data) {
				ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'
				}
				return ret
				}],
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				}
				}).then((response)=>{
                    this.#[[$Message]]#.success('success');
				})
				.catch(function (response) {
                    this.#[[$Message]]#.error('fail');
				});
				setTimeout(() => {
				this.changeLoading();
				this.modal1 = false;
				}, 1000);
				});
            },
            cancel () {
                this.#[[$Message]]#.info('点击了取消');
            },
            search (){
                this.tableData = this.mocktableData(0);
            },
            disable () {
                var ids = getSelectIds(this.#[[$refs]]#['table'].getSelection());
                if(ids == '')
                {
                    this.#[[$Message]]#.warning('请选择一个');
                    return;
                }
                if(ids.split(",").length > 1)
                {
                    this.#[[$Message]]#.warning('仅能选择一个');
                    return;
                }
                this.#[[$Modal]]#.confirm({
                    title: '提示',
                    content: '<p>确定要禁用吗?</p><p></p>',
                    onOk: () => {
                        var postData = {id:ids};
                        axios({
                            url: 'http://localhost:8087/admin/${classname}/disable',
                            method: 'post',
                            data: postData,
                            transformRequest: [function (data) {
                                let ret = ''
                                for (let it in data) {
                                    ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'
                                }
                                return ret
                            }],
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'
                            }
                        }).then((response)=>{
                            this.#[[$Message]]#.success('success');
                        }).catch(function (response) {
                            this.#[[$Message]]#.error('fail');
                        });
                    }
                });
            },
            enable () {
                var ids = getSelectIds(this.#[[$refs]]#['table'].getSelection());
                if(ids == '')
                {
                    this.#[[$Message]]#.warning('请选择一个');
                    return;
                }
                if(ids.split(",").length > 1)
                {
                    this.#[[$Message]]#.warning('仅能选择一个');
                    return;
                }
                this.#[[$Modal]]#.confirm({
                    title: '提示',
                    content: '<p>确定要启用吗?</p><p></p>',
                    onOk: () => {
                        var postData = {id:ids};
                        axios({
                            url: 'http://localhost:8087/admin/${classname}/enable',
                            method: 'post',
                            data: postData,
                            transformRequest: [function (data) {
                                let ret = ''
                                for (let it in data) {
                                    ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'
                                }
                                return ret
                            }],
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'
                            }
                        }).then((response)=>{
                            this.#[[$Message]]#.success('success');
                        }).catch(function (response) {
                            this.#[[$Message]]#.error('fail');
                        });
                    }
                });
            }
        }
    }
</script>
<style lang="scss" scoped>
    @import "~common/scss/variable";
    @import "~common/scss/mixin";
    @import "~common/scss/table";
</style>
